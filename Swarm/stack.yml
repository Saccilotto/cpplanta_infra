services:
  traefik:
    image: traefik:v2.10
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false" 
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.le.acme.tlschallenge=true"
      - "--certificatesresolvers.le.acme.email=sacilotto.andre@gmail.com"
      - "--certificatesresolvers.le.acme.storage=/acme.json"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "traefik-certificates:/acme.json"
    networks:
      - backend_network
      - frontend_network
      - traefik_network
    deploy:
      replicas: 1
      restart_policy:
        condition: unless-stopped
      labels:
        - "traefik.enable=true"
        # Roteador HTTP para redirecionamento
        - "traefik.http.routers.traefik-http.rule=Host(`cpplanta-traefik.duckdns.org`)"
        - "traefik.http.routers.traefik-http.entrypoints=web"
        - "traefik.http.routers.traefik-http.middlewares=redirect-to-https"
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
        # Roteador HTTPS para o dashboard
        - "traefik.http.routers.traefik-https.rule=Host(`cpplanta-traefik.duckdns.org`)"
        - "traefik.http.routers.traefik-https.entrypoints=websecure"
        - "traefik.http.routers.traefik-https.service=api@internal"
        - "traefik.http.middlewares.auth.basicauth.users=trafico:$$apr1$$sPVjgY2d$9zfYktoeLx/jZRZ7BygZO."
        - "traefik.http.routers.traefik-https.middlewares=auth"
        # Security middleware
        - "traefik.http.middlewares.ratelimit.ratelimit.average=300"
        - "traefik.http.middlewares.ratelimit.ratelimit.burst=150"
        - "traefik.http.routers.traefik-https.middlewares=auth,ratelimit"
        # Security headers
        - "traefik.http.middlewares.secure-headers.headers.stsSeconds=31536000"
        - "traefik.http.middlewares.secure-headers.headers.frameDeny=true"
        - "traefik.http.middlewares.secure-headers.headers.contentTypeNosniff=true"
        - "traefik.http.middlewares.secure-headers.headers.browserXssFilter=true"
        - "traefik.http.routers.frontend.middlewares=secure-headers"

  duckdns:
    image: linuxserver/duckdns
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Sao_Paulo
      - SUBDOMAINS=cpplanta-traefik,cpplanta-swagger,cpplanta-pgadmin,cpplanta-frontend
      - TOKEN=ab25d043-0943-4338-88c7-315b3973ca90
    networks:
      - traefik_network
    deploy:
      replicas: 1
      restart_policy:
        condition: any


  postgres_primary:
    image: norohim/postgres-optimal:latest
    environment:
      - ROLE=primary
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - NODE_ID=1
      - NODE_NAME=primary
      - NODE_HOST=postgres_primary
    volumes:
      - primary_data:/var/lib/postgresql/data
    networks:
      - backend_network
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    ports:
      - "5432:5432"

  postgres_replica:
    image: norohim/postgres-optimal:latest
    environment:
      - ROLE=replica
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - NODE_ID=2
      - NODE_NAME=replica1
      - NODE_HOST=postgres_replica
      - REPLICATE_FROM=postgres_primary
    volumes:
      - replica_data:/var/lib/postgresql/data
    networks:
      - backend_network
    depends_on:
      - postgres_primary
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    ports:
      - "5433:5432"

  pgbouncer:
    image: norohim/pgbouncer:latest
    environment:
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    networks:
      - backend_network
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    ports:
      - "6432:6432"

  backend:
    image: norohim/cp-planta-backend:latest
    environment:
      - NODE_ENV=production
      - DB_HOST=pgbouncer
      - DB_PORT=6432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=postgres
      - DATABASE_URL=postgresql://postgres:postgres@pgbouncer:6432/postgres
    networks:
      - backend_network
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.swagger.entrypoints=websecure"
        - "traefik.http.routers.swagger.rule=Host(`cpplanta-swagger.duckdns.org`) && PathPrefix(`/api`)"
        - "traefik.http.routers.swagger.middlewares=swagger-strip-prefix"
        - "traefik.http.middlewares.swagger-strip-prefix.stripPrefix.prefixes=/api"
        - "traefik.http.services.swagger.loadbalancer.server.port=3000"
      replicas: 1
      restart_policy:
        condition: any
        
  pgadmin:
    image: norohim/pgadmin:latest
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    environment:
      - PGADMIN_DEFAULT_EMAIL=fulano@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=abc123
    depends_on:
      - postgres_primary
    networks:
      - backend_network
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.pgadmin.entrypoints=websecure"
        - "traefik.http.routers.pgadmin.rule=Host(`cpplanta-pgadmin.duckdns.org`)"
        - "traefik.http.services.pgadmin.loadbalancer.server.port=80"
      replicas: 1
      restart_policy:
        condition: any
    volumes:
      - pgadmin_data:/var/lib/pgadmin 

  hoppscotch:
    image: hoppscotch/hoppscotch:latest
    volumes:
      - ./config/hoppscotch:/app/config 
    networks:
      - backend_network
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.pgadmin.entrypoints=websecure"
        - "traefik.http.routers.pgadmin.rule=Host(`cpplanta-hoppscotch.duckdns.org`)"
        - "traefik.http.services.pgadmin.loadbalancer.server.port=4000"
      replicas: 1
      restart_policy:
        condition: on-failure

  frontend:
    image: norohim/cp-planta-frontend:latest
    environment:
      - NODE_ENV=production
      - PORT=3001
    networks:
      - frontend_network
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.frontend.entrypoints=websecure"
        - "traefik.http.routers.frontend.rule=Host(`cpplanta-frontend.duckdns.org`)"
        - "traefik.http.services.frontend.loadbalancer.server.port=3001"
      replicas: 1
      restart_policy:
        condition: any

  runners:
    image: gitlab/gitlab-runner:latest
    environment:
      - CI_SERVER_URL=${CI_SERVER_URL}
      - RUNNER_TOKEN=${RUNNER_TOKEN}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /srv/gitlab-runner/config:/etc/gitlab-runner
    networks:
      - runner_network
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          cpus: "0.75"
          memory: "1.25G"
        reservations:
          cpus: "0.5"
          memory: "0.75G"
      restart_policy:
        condition: any

networks:
  backend_network:
    driver: overlay
  frontend_network:
    driver: overlay
  runner_network:
    driver: overlay
  traefik_network:
    driver: overlay

volumes:
  primary_data:
    driver: local
  replica_data:
    driver: local
  pgadmin_data:
    driver: local
  hoppscotch_data:
    driver: local
  traefik-certificates:
    driver: local