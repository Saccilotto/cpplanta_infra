---
- name: Configurar o Docker Swarm Cluster
  hosts: all
  become: yes
  tasks:

  - name: Verificar se o Docker está instalado
    command: docker --version
    ignore_errors: yes
    register: docker_installed

  - name: Adicionar chave GPG do Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present
    when: docker_installed is failed

  - name: Adicionar repositório oficial do Docker para Ubuntu Server
    apt_repository:
      repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
      state: present
    when: docker_installed is failed

  - name: Atualizar cache do APT
    apt:
      update_cache: yes
    when: docker_installed is failed

  - name: Instalar Docker no Ubuntu Server
    apt:
      name: docker-ce
      state: present
    when: docker_installed is failed

  - name: Iniciar e habilitar o Docker
    service:
      name: docker
      state: started
      enabled: yes
    when: docker_installed is failed

  # Parte específica para o Manager
  - name: Verificar se o Docker Swarm já está ativo no Manager
    shell: docker info
    register: docker_info
    delegate_to: "{{ groups['manager'][0] }}"
    run_once: true
    ignore_errors: yes

  - name: Inicializar o Swarm no Manager se ainda não estiver ativo
    shell: docker swarm init --advertise-addr {{ ansible_host }}
    when:
      - docker_info.stdout is defined
      - "'Swarm: inactive' in docker_info.stdout"
    delegate_to: "{{ groups['manager'][0] }}"
    run_once: true
    ignore_errors: yes

  - name: Capturar o token do Swarm para adicionar workers
    shell: docker swarm join-token worker -q
    when:
      - docker_info is defined
      - "'Swarm: active' in docker_info.stdout"
    register: worker_token
    delegate_to: "{{ groups['manager'][0] }}"
    run_once: true

  - name: Verificar o conteúdo de worker_token
    debug:
      var: worker_token
    when: worker_token is defined  # Verificar se worker_token está definido antes de exibir
    run_once: true

  - name: Exibir o token capturado para verificação
    debug:
      msg: "Token capturado: {{ worker_token.stdout }}"
    when: worker_token is defined and worker_token.stdout is defined  # Exibe o token somente se worker_token.stdout estiver definido
    run_once: true

  - name: Verificar o status do Swarm no Worker
    shell: docker info
    register: worker_swarm_info
    delegate_to: "{{ item }}"
    with_items: "{{ groups['worker'] }}"
    run_once: false
    ignore_errors: yes

  - name: Adicionar workers ao Swarm se não fizerem parte de um Swarm
    shell: docker swarm join --token {{ worker_token.stdout }} {{ groups['manager'][0] }}:2377
    when: >
      worker_swarm_info.stdout is defined and
      ('Swarm: inactive' in worker_swarm_info.stdout or 'Error response from daemon: This node is not part of a swarm' in worker_swarm_info.stderr)
    delegate_to: "{{ item }}"
    with_items: "{{ groups['worker'] }}"
    run_once: false

  - name: Copiar o arquivo stack.yml para o Manager
    copy:
      src: ./stack.yml
      dest: /home/adminuser/stack.yml
    delegate_to: "{{ groups['manager'][0] }}"
    run_once: true

  - name: Executar o deploy do stack no Manager
    shell: docker stack deploy -c /home/adminuser/stack.yml CP-Planta
    delegate_to: "{{ groups['manager'][0] }}"
    run_once: true

  - name: Verificar o status do stack
    shell: docker stack ps CP-Planta
    delegate_to: "{{ groups['manager'][0] }}"
    run_once: true

  - name: Gerar novos inventários para Ansible
    local_action: 
      module: command 
      cmd: bash ./merge_ip.sh
    become: no