---
- name: Configure the Docker Swarm Cluster
  hosts: all
  become: yes
  vars:
    manager_node: "{{ groups['CPPlanta1'][0] }}"

  tasks:
    - name: Remove old Docker versions
      apt:
        name:
          - docker
          - docker-engine
          - docker.io
          - containerd
          - runc
        state: absent
      become: yes

    - name: Install dependencies
      apt:
        name:
          - curl
          - ca-certificates
          - git
          - acl
          - python3
          - python3-pip
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: yes
      become: yes
      
    - name: Install Docker APT repository key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker APT repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install Docker SDK for Python using apt
      apt:
        name: python3-docker
        state: present
      become: yes

    - name: Add users to docker group
      user:
        name: "{{ item }}"
        groups: docker
        append: yes
      loop:
        - "{{ ansible_ssh_user }}"
        - gitlab-runner

    - name: Ensure Docker service is running
      systemd:
        name: docker
        state: started
        enabled: true
      become: yes

    - name: Initialize Swarm on manager
      docker_swarm:
        state: present
        advertise_addr: "{{ ansible_host }}"
      when: inventory_hostname == manager_node

    - name: Get Swarm join tokens from manager
      docker_swarm_info:
      register: swarm_info
      delegate_to: "{{ manager_node }}"  
      run_once: true

    - name: Join workers to Swarm
      docker_swarm:
        state: present
        join_token: "{{ swarm_info.swarm_facts.JoinTokens.Worker }}"  
        remote_addrs:
          - "{{ inventory_hostname }}" 
      when: inventory_hostname != manager_node  
      ignore_errors: yes

    - name: Copy stack.yml to manager
      copy:
        src: ./stack.yml
        dest: /home/{{ ansible_ssh_user }}/stack.yml
      delegate_to: "{{ manager_node }}"
      run_once: true

    - name: Deploy the stack on manager
      shell: docker stack deploy -c /home/{{ ansible_ssh_user }}/stack.yml CP-Planta
      args:
        chdir: /home/{{ ansible_ssh_user }}
      delegate_to: "{{ manager_node }}"
      run_once: true

    - name: Wait for services to stabilize
      pause:
        seconds: 30
      delegate_to: "{{ manager_node }}"
      run_once: true

    - name: Verify services are running
      shell: docker service ls
      register: service_list
      delegate_to: "{{ manager_node }}"
      run_once: true

    - name: Show services
      debug:
        var: service_list.stdout_lines
      run_once: true