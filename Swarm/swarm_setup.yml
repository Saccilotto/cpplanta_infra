- name: Configure the Docker Swarm Cluster
  hosts: all
  become: yes
  vars:
    manager_node: "{{ groups['CPPlanta1'][0] }}"

  tasks:
    - name: Remove old Docker versions
      apt:
        name:
          - docker
          - docker-engine
          - docker.io
          - containerd
          - runc
        state: absent
        update_cache: yes
      become: yes

    - name: Install dependencies
      apt:
        name:
          - curl
          - ca-certificates
          - git
          - acl
          - python3
          - python3-pip
          - lsb-release
        state: present
        update_cache: yes
      become: yes

    - name: Add Docker's official GPG key and save it in the recommended keyring
      ansible.builtin.shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      become: yes
      args:
        creates: /usr/share/keyrings/docker-archive-keyring.gpg
      ignore_errors: yes

    - name: Add Docker's repository
      ansible.builtin.shell: |
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu jammy stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      become: yes
      ignore_errors: yes

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
      become: yes

    - name: Install Docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: yes
      become: yes

    - name: Install Docker SDK for Python
      apt:
        name: python3-docker
        state: present
      become: yes

    - name: Add users to the Docker group
      user:
        name: "{{ item }}"
        groups: docker
        append: yes
      loop:
        - "{{ ansible_ssh_user }}"
        - gitlab-runner

    - name: Ensure Docker service is running
      systemd:
        name: docker
        state: started
        enabled: true
      become: yes

    - name: Initialize Swarm on manager
      docker_swarm:
        state: present
        advertise_addr: "{{ ansible_host }}"
      when: inventory_hostname == manager_node

    - name: Get Swarm join tokens from manager
      docker_swarm_info:
      register: swarm_info
      delegate_to: "{{ manager_node }}"
      run_once: true

    - name: Join workers to Swarm
      docker_swarm:
        state: present
        join_token: "{{ swarm_info.swarm_facts.JoinTokens.Worker }}"
        remote_addrs:
          - "{{ inventory_hostname }}"
      when: inventory_hostname != manager_node
      ignore_errors: yes

    - name: Copy stack.yml to manager
      copy:
        src: ./stack.yml
        dest: /home/{{ ansible_ssh_user }}/stack.yml
      delegate_to: "{{ manager_node }}"
      run_once: true

    - name: Deploy the stack on manager (with force update)
      shell: docker stack deploy --with-registry-auth --resolve-image always -c /home/{{ ansible_ssh_user }}/stack.yml CP-Planta
      args:
        chdir: /home/{{ ansible_ssh_user }}
      delegate_to: "{{ manager_node }}"
      run_once: true

    - name: Wait for services to stabilize
      pause:
        seconds: 45
      delegate_to: "{{ manager_node }}"
      run_once: true

    - name: Verify services are running
      shell: docker service ls
      register: service_list
      delegate_to: "{{ manager_node }}"
      run_once: true

    - name: Show services
      debug:
        var: service_list.stdout_lines
      run_once: true

    - name: Force update any failed services
      shell: |
        failed_services=$(docker service ls --filter "desired-state=running" --filter "replicas=0" -q)
        for service in $failed_services; do
          docker service update --force $service
        done
      delegate_to: "{{ manager_node }}"
      run_once: true