---
- name: Configure the Docker Swarm Cluster
  hosts: all
  become: yes
  vars:
    manager_node: "{{ groups['CPPlanta1'][0] }}"
  tasks:
    - name: Install dependencies
      apt:
        name:
          - curl
          - ca-certificates
          - git
          - acl
        state: present
        update_cache: yes

    - name: Install Docker using official script
      shell: curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh
      args:
        creates: /usr/bin/docker

    - name: Add users to docker group
      user:
        name: "{{ item }}"
        groups: docker
        append: yes
      loop:
        - "{{ ansible_ssh_user }}"
        - gitlab-runner

    - name: Initialize Swarm on manager
      docker_swarm:
        state: present
        advertise_addr: "{{ ansible_host }}"
      when: inventory_hostname == manager_node

    - name: Get Swarm join tokens
      docker_swarm_info:
      register: swarm_info
      delegate_to: "{{ manager_node }}"
      run_once: true

    - name: Join workers to Swarm
      docker_swarm:
        state: present
        join_token: "{{ swarm_info.swarm_facts.JoinTokens.Worker }}"
        remote_addrs:
          - "{{ hostvars[manager_node].ansible_host }}"
      when: inventory_hostname != manager_node

    - name: Copy stack.yml to manager
      copy:
        src: ./stack.yml
        dest: /home/{{ ansible_ssh_user }}/stack.yml
      delegate_to: "{{ manager_node }}"
      run_once: true

    - name: Deploy the stack on manager
      shell: docker stack deploy -c /home/{{ ansible_ssh_user }}/stack.yml CP-Planta
      args:
        chdir: /home/{{ ansible_ssh_user }}
      delegate_to: "{{ manager_node }}"
      run_once: true

    - name: Wait for services to stabilize
      pause:
        seconds: 30
      delegate_to: "{{ manager_node }}"
      run_once: true

    - name: Verify services are running
      shell: docker service ls
      register: service_list
      delegate_to: "{{ manager_node }}"
      run_once: true

    - name: Show services
      debug:
        var: service_list.stdout_lines
      run_once: true