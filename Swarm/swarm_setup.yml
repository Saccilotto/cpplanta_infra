---
- name: Configurar o Docker Swarm Cluster
  hosts: all
  become: yes
  tasks:

  - name: Ensure dependencies are installed
    apt:
      name: 
        - curl
        - ca-certificates
        - git
      state: present
      update_cache: yes
  
  - name: Ensure Docker is installed on all nodes
    apt:
      name: 
        - docker.io
        - containerd
      state: present
      update_cache: yes

  - name: Verificar se o Docker está instalado
    command: docker --version
    ignore_errors: yes
    register: docker_installed

  - name: Adicionar o usuário ao grupo docker
    user:
      name: adminuser
      groups: docker
      append: yes

  # Inicializar o Swarm no nó manager (vm1) se ainda não estiver inicializado
  - name: Verificar se o Docker Swarm está ativo no manager
    shell: docker info
    register: docker_info
    delegate_to: "{{ groups['vm1'][0] }}"
    run_once: true
    ignore_errors: yes

  - name: Inicializar o Swarm no manager (vm1) se ainda não estiver ativo
    shell: docker swarm init --advertise-addr {{ ansible_host }}
    when: "'Swarm: inactive' in docker_info.stdout"
    delegate_to: "{{ groups['vm1'][0] }}"
    run_once: true

  # Recuperar o token para os workers se o Swarm foi inicializado
  - name: Obter o token de junção para os workers
    shell: docker swarm join-token worker -q
    register: worker_join_token
    delegate_to: "{{ groups['vm1'][0] }}"
    run_once: true

  - name: Juntar os workers ao Swarm
    shell: docker swarm join --token {{ hostvars[groups['vm1'][0]].worker_join_token.stdout }} {{ hostvars[groups['vm1'][0]].inventory_hostname }}:2377
    when: inventory_hostname != groups['vm1'][0]

  # Copiar e implantar o stack no nó manager (vm1)
  - name: Copiar o arquivo stack.yml para o nó manager
    copy:
      src: ./stack.yml
      dest: /home/adminuser/stack.yml
    delegate_to: "{{ groups['vm1'][0] }}"
    run_once: true

  - name: Executar o deploy do stack no nó manager
    shell: docker stack deploy -c /home/adminuser/stack.yml CP-Planta
    delegate_to: "{{ groups['vm1'][0] }}"
    run_once: true

  - name: Verificar o status do stack no nó manager
    shell: docker stack ps CP-Planta
    delegate_to: "{{ groups['vm1'][0] }}"
    run_once: true


  # # Checar conectividade na porta 3001 para o frontend
  # - name: Verificar se o frontend está acessível via porta 3001
  #   wait_for:
  #     host: "{{ ansible_host  }}"
  #     port: 3001
  #     state: started
  #     timeout: 30
  #   delegate_to: "{{ item }}"
  #   loop: "{{ groups['all'] }}"
  #   run_once: false

  # # Verificar se o frontend responde HTTP na porta 3001
  # - name: Verificar se o frontend responde HTTP na porta 3001
  #   uri:
  #     url: "http://{{ item }}:3001"
  #     status_code: 200
  #   loop: "{{ groups['all'] }}"
  #   run_once: false

  # # Checar conectividade na porta 8080 para o pgAdmin
  # - name: Verificar se o pgAdmin está acessível via porta 8080
  #   wait_for:
  #     host: "{{ ansible_host  }}"
  #     port: 80
  #     state: started
  #     timeout: 30
  #   delegate_to: "{{ item }}"
  #   loop: "{{ groups['all'] }}"
  #   run_once: false

  # # Verificar se o pgAdmin responde HTTP na porta 8080
  # - name: Verificar se o pgAdmin responde HTTP na porta 80
  #   uri:
  #     url: "http://{{ item }}:80"
  #     status_code: 200
  #   loop: "{{ groups['all'] }}"
