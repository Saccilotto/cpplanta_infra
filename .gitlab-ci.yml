stages:
  - deploy

variables:
  DOCKER_REGISTRY: docker.io
  SSH_USER: $SSH_USER  # Nome do usuário SSH
  STATIC_IP_1: $STATIC_IP_1  # Primeiro IP estático
  STATIC_IP_2: $STATIC_IP_2  # Segundo IP estático
  PEM_FILE_CONTENT: $PEM_FILE_CONTENT  # Conteúdo do arquivo PEM para a primeira VM
  PEM_FILE_PATH: "$CI_PROJECT_DIR/CP-Planta.pem"  # Caminho do arquivo PEM para a primeira VM

default:
  image: alpine:latest  # Usando Alpine como base

before_script:
  - echo "$PEM_FILE_CONTENT" > $PEM_FILE_PATH  # Recupera o conteúdo do arquivo PEM 2 de uma variável de ambiente
  - chmod 400 ./CP-Planta.pem  # Ajusta as permissões dos arquivos PEM
  - apk add --no-cache docker ansible openssh  # Instalar Docker, Ansible e SSH
  - apk add --no-cache python3 py3-pip  # Se o script utilizar Python
  - apk add --no-cache bash
  - ls -l

deploy:
  stage: deploy
  script:
    # Modifica o arquivo static_ip.ini.example de acordo com as variáveis de ambiente
    - cp static_ip.ini.example static_ip.ini  # Faz uma cópia do arquivo de exemplo
    - sed -i "s|<your-ip1>|$STATIC_IP_1|" static_ip.ini  # Substitui o primeiro IP estático
    - sed -i "s|<your-ip2>|$STATIC_IP_2|" static_ip.ini  # Substitui o segundo IP estático
    - sed -i "s|<your-user>|$SSH_USER|" static_ip.ini  # Substitui o usuário SSH
    - sed -i "s|<path-pem>|$PEM_FILE_PATH|" static_ip.ini  # Substitui o caminho do arquivo PEM
    # Certifique-se de que o script de deploy tenha permissão de execução
    - cat static_ip.ini
    - chmod +x ./deploy.sh
    # Executa o script de deploy
    - bash deploy.sh
  only:
    - main  # Define que o job será executado apenas na branch main