stages:
  - deploy

variables:
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE_NODE: norohim/cp-planta-backend:latest
  DOCKER_IMAGE_POSTGRES: norohim/cp-planta-database:latest
  DOCKER_IMAGE_FRONTEND: norohim/cp-planta-frontend:latest

default:
  image: alpine:latest  # Usando Alpine como base
  services:
    - docker:dind  # Docker in Docker

before_script:
  - apk add --no-cache docker  # Instala o Docker no Alpine
  - rc-update add docker boot  # Configura o Docker para iniciar
  - service docker start  # Inicia o serviço Docker
  - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD" $DOCKER_REGISTRY
  - npm ci  # Instala as dependências do Node.js

deploy:
  stage: deploy
  script:
    # Login no Docker e configuração do Docker Swarm
    - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD" $DOCKER_REGISTRY
    - docker swarm init --advertise-addr $SWARM_MANAGER || true
    - docker node ls  # Verifica o status do Swarm
    # Faz o pull das imagens para o Swarm
    - docker pull $DOCKER_IMAGE_NODE
    - docker pull $DOCKER_IMAGE_POSTGRES
    - docker pull $DOCKER_IMAGE_FRONTEND
    # Executa o script de deploy da stack
    - chmod +x ./deploy.sh  # Certifique-se de que o script tenha permissão de execução
    - bash deploy.sh  # Executa o script de deploy utilizando sh
  only:
    - main  # Define que o job será executado apenas na branch main
