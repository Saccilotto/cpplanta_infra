---
- hosts: grafana
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
    #prometheus_config_path: /etc/prometheus/prometheus.yml
    prometheus_host_config_dir: /opt/prometheus
    grafana_admin_user: "admin"
    grafana_admin_password: "admin"
    # alert_rules_file: "./alert_rules.yml"
    prometheus_port: 9090
    grafana_port: 3000
  tasks:
    # - name: Display all variables/facts known for a host
    #   debug:
    #     var: groups["postgresql"][0]
    #   tags: debug_info
    - name: Update apt cache and install dependencies
      apt:
        update_cache: yes
        name:
          - docker.io
          - docker-compose
          - python3-pip
        state: present

    - name: Install Docker SDK for Python
      pip:
        name: docker
        state: present

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes

    - name: Create Docker network
      community.docker.docker_network:
        name: monitoring_network

    - name: Pull Prometheus image
      community.docker.docker_image:
        name: prom/prometheus
        source: pull

    - name: Pull Grafana image
      community.docker.docker_image:
        name: grafana/grafana
        source: pull

    - name: Create Prometheus configuration directory on host
      file:
        path: "{{ prometheus_host_config_dir }}"
        state: directory
        mode: '0755'

    - name: Template Prometheus configuration file
      template:
        src: prometheus.yml.j2
        dest: "{{ prometheus_host_config_dir }}/prometheus.yml"

    # - name: Template Prometheus alert rules file
    #   template:
    #     src: alert_rules.yml.j2
    #     dest: "{{ prometheus_host_config_dir }}/alert_rules.yml"

    - name: Run Prometheus container
      community.docker.docker_container:
        name: prometheus
        image: prom/prometheus
        state: started
        restart_policy: always
        networks:
          - name: monitoring_network
        volumes:
          - "{{ prometheus_host_config_dir }}:/etc/prometheus"
        ports:
          - "{{ prometheus_port }}:{{ prometheus_port }}"

    - name: Run Grafana container
      community.docker.docker_container:
        name: grafana
        image: grafana/grafana
        state: started
        restart_policy: always
        ports:
          - "{{ grafana_port }}:{{ grafana_port }}"
        networks:
          - name: monitoring_network
          
    - name: Wait for Prometheus to be ready
      wait_for:
        port: "{{ prometheus_port }}"
        host: "{{ ansible_host }}"
        timeout: 20

    - name: Wait for Grafana to be ready
      wait_for:
        port: "{{ grafana_port }}"
        host: "{{ ansible_host }}"
        timeout: 20

    - name: Create Prometheus data source in Grafana
      uri:
        url: "http://{{ ansible_host }}:{{ grafana_port }}/api/datasources"
        method: POST
        user: "{{ grafana_admin_user }}"
        password: "{{ grafana_admin_password }}"
        force_basic_auth: yes
        body_format: json
        headers:
          Content-Type: "application/json"
        body: |
          {
            "name": "Prometheus",
            "type": "prometheus",
            "access": "proxy",
            "url": "http://{{ ansible_host }}:{{ prometheus_port }}",
            "isDefault": true
          }
        status_code: [200, 409]  # 409 = alterady exists
  
    - name: Check if Grafana dashboard exists
      uri:
        url: "http://{{ ansible_host }}:{{ grafana_port }}/api/dashboards/uid/prometheus-metrics"
        method: GET
        user: "{{ grafana_admin_user }}"
        password: "{{ grafana_admin_password }}"
        force_basic_auth: yes
        status_code: [200, 404]
      register: dashboard_check

    - name: Import or update Grafana dashboard
      uri:
        url: "http://{{ ansible_host }}:{{ grafana_port }}/api/dashboards/db"
        method: POST
        user: "{{ grafana_admin_user }}"
        password: "{{ grafana_admin_password }}"
        force_basic_auth: yes
        body_format: json
        headers:
          Content-Type: "application/json"
        body: "{{ lookup('file', './dashboard.json') }}"
        status_code: 200
      when: dashboard_check.status == 404
    # removed (endpoint seems to be deprecated)

    # - name: Check if Grafana notification channel exists
    #   uri:
    #     url: "http://{{ ansible_host }}:{{ grafana_port }}/api/alert-notifications"
    #     method: GET
    #     user: "{{ grafana_admin_user }}"
    #     password: "{{ grafana_admin_password }}"
    #     force_basic_auth: yes
    #     status_code: 200
    #   register: notification_channels

    # - name: Create Grafana notification channel
    #   uri:
    #     url: "http://{{ ansible_host }}:{{ grafana_port }}/api/alert-notifications"
    #     method: POST
    #     user: "{{ grafana_admin_user }}"
    #     password: "{{ grafana_admin_password }}"
    #     force_basic_auth: yes
    #     body_format: json
    #     headers:
    #       Content-Type: "application/json"
    #     body: |
    #       {
    #         "name": "Email",
    #         "type": "email",
    #         "settings": {
    #           "addresses": "andre.santos01@edu.pucrs.br"
    #         }
    #       }
    #     status_code: [200, 409]  # 409 if it already exists

    # - name: Update existing Grafana notification channel
    #   uri:
    #     url: "http://{{ ansible_host }}:{{ grafana_port }}/api/alert-notifications/{{ item.id }}"
    #     method: PUT
    #     user: "{{ grafana_admin_user }}"
    #     password: "{{ grafana_admin_password }}"
    #     force_basic_auth: yes
    #     body_format: json
    #     headers:
    #       Content-Type: "application/json"
    #     body: |
    #       {
    #         "name": "Email",
    #         "type": "email",
    #         "settings": {
    #           "addresses": "andre.santos01@edu.pucrs.br"
    #         }
    #       }
    #     status_code: 200
    #   loop: "{{ notification_channels.json }}"
    #   when: item.name == 'Email'
